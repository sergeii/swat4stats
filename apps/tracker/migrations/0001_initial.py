# Generated by Django 4.1.7 on 2023-04-06 16:39

import apps.utils.db.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.functions.text
import django.utils.timezone

from apps.utils.db.operations import CreateEnumType


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('geoip', '0002_ip_tracker_ip_length_idx'),
    ]

    operations = [
        CreateEnumType('gametype_enum', ['Barricaded Suspects', 'VIP Escort',
                                         'Rapid Deployment', 'CO-OP',
                                         'Smash And Grab', 'CO-OP QMM']),
        CreateEnumType('team_enum', ['swat', 'suspects']),
        CreateEnumType('outcome_enum', ['swat_bs', 'sus_bs', 'swat_rd', 'sus_rd',
                                        'tie', 'swat_vip_escape', 'sus_vip_good_kill',
                                        'swat_vip_bad_kill', 'sus_vip_bad_kill', 'coop_completed',
                                        'coop_failed', 'swat_sg', 'sus_sg']),
        CreateEnumType('coop_status_enum', ['Not Ready', 'Ready', 'Healthy', 'Injured', 'Incapacitated']),
        CreateEnumType('objective_enum', ['Rendezvous with Jennings', 'Avoid civilian injuries',
                                          'Avoid officer injuries', 'Avoid officer casualties',
                                          'Avoid suspect casualties', 'Avoid injuries to yourself',
                                          'Debrief before the timer expires', 'Find and deactivate the bombs',
                                          'Find and disarm the bombs!', 'Investigate the laundromat',
                                          'Neutralize Alice Jenkins', 'Bring order to chaos', 'Neutralize Javier Arias',
                                          'Neutralize Andrew Taronne', 'Neutralize Anton Georgiev',
                                          'Neutralize Simon Gowan', 'Neutralize Lian Niu', 'Neutralize Alex Jimenez',
                                          'Neutralize Lawrence Fairfax', 'Neutralize Kiril Stetchkov',
                                          'Neutralize Hadeon Koshka', 'Neutralize Allen Kruse',
                                          'Neutralize Andrew Norman', 'Neutralize Jean Trouffant',
                                          'Neutralize Todor Stetchkov', 'Rescue Lawrence Adams',
                                          'Rescue all of the civilians', 'Rescue Gary Altman', 'Arrest Louie Baccus',
                                          'Rescue James Betincourt', 'Rescue Oscar Bogard', 'Rescue Warren Rooney',
                                          'Rescue Hyun-Jun Park', 'Rescue Willis Fischer', 'Rescue Melinda Kline',
                                          'Rescue Lionel Macarthur', 'Rescue Heidi Rosenstein',
                                          'Rescue Dr. Theodore Sturgeon', 'Rescue Kim Dong Yin',
                                          'Rescue Detective Walsh', 'Locate Officer Wilkins', 'Rescue Rita Winston',
                                          'Secure the briefcase', 'Secure the MAC-10']),
        CreateEnumType('objective_status_enum', ['In Progress', 'Completed', 'Failed']),
        CreateEnumType('procedure_enum', ['Suspects incapacitated', 'Suspects arrested', 'Mission completed',
                                          'Failed to report a downed officer', 'Suspects neutralized',
                                          'No civilians injured', 'Incapacitated a hostage', 'Killed a hostage',
                                          'Incapacitated a fellow officer', 'Injured a fellow officer',
                                          'No officers down', 'No suspects neutralized',
                                          'Unauthorized use of deadly force', 'Unauthorized use of force',
                                          'Player uninjured', 'Failed to prevent destruction of evidence.',
                                          'Failed to apprehend fleeing suspect.', 'Report status to TOC',
                                          'All evidence secured']),
        CreateEnumType('equipment_enum', ['None', 'M4 Super90', 'Nova Pump', 'Shotgun',
                                          'Less Lethal Shotgun', 'Pepper-ball',
                                          'Colt M4A1 Carbine', 'AK-47 Machinegun',
                                          'GB36s Assault Rifle', 'Gal Sub-machinegun',
                                          '9mm SMG', 'Suppressed 9mm SMG', '.45 SMG',
                                          'M1911 Handgun', '9mm Handgun', 'Colt Python',
                                          'Taser Stun Gun', 'VIP Colt M1911 Handgun',
                                          'CS Gas VIP', 'Light Armor', 'Heavy Armor',
                                          'Gas Mask', 'Helmet', 'Flashbang', 'CS Gas',
                                          'Stinger', 'Pepper Spray', 'Optiwand', 'Toolkit',
                                          'Door Wedge', 'C2 (x3)', 'The Detonator',
                                          'Zip-cuffs', 'IAmCuffed', 'Colt Accurized Rifle',
                                          '40mm Grenade Launcher', '5.56mm Light Machine Gun',
                                          '5.7x28mm Submachine Gun', 'Mark 19 Semi-Automatic Pistol',
                                          '9mm Machine Pistol', 'Cobra Stun Gun', 'Ammo Pouch',
                                          'No Armor', 'Night Vision Goggles',
                                          'Stinger Grenade', 'CS Gas Grenade', 'Flashbang Grenade', 'Baton Grenade']),
        CreateEnumType('ammo_enum', ['None', 'M4Super90SGAmmo', 'M4Super90SGSabotAmmo',
                                     'NovaPumpSGAmmo', 'NovaPumpSGSabotAmmo',
                                     'LessLethalAmmo', 'CSBallLauncherAmmo',
                                     'M4A1MG_JHP', 'M4A1MG_FMJ', 'AK47MG_FMJ',
                                     'AK47MG_JHP', 'G36kMG_FMJ', 'G36kMG_JHP',
                                     'UZISMG_FMJ', 'UZISMG_JHP', 'MP5SMG_JHP',
                                     'MP5SMG_FMJ', 'UMP45SMG_FMJ', 'UMP45SMG_JHP',
                                     'ColtM1911HG_JHP', 'ColtM1911HG_FMJ', 'Glock9mmHG_JHP',
                                     'Glock9mmHG_FMJ', 'PythonRevolverHG_FMJ', 'PythonRevolverHG_JHP',
                                     'TaserAmmo', 'VIPPistolAmmo_FMJ', 'ColtAR_FMJ',
                                     'HK69GL_StingerGrenadeAmmo', 'HK69GL_FlashbangGrenadeAmmo',
                                     'HK69GL_CSGasGrenadeAmmo', 'HK69GL_TripleBatonAmmo',
                                     'SAWMG_JHP', 'SAWMG_FMJ', 'FNP90SMG_FMJ', 'FNP90SMG_JHP',
                                     'DEHG_FMJ', 'DEHG_JHP', 'TEC9SMG_FMJ']),
        CreateEnumType('stats_category_enum', ['arrested', 'arrests', 'average_arrest_streak', 'average_death_streak',
                                               'average_kill_streak', 'coop_best_time', 'coop_enemy_arrests',
                                               'coop_enemy_incaps',
                                               'coop_enemy_incaps_invalid', 'coop_enemy_kills',
                                               'coop_enemy_kills_invalid',
                                               'coop_hostage_arrests', 'coop_hostage_hits', 'coop_hostage_incaps',
                                               'coop_hostage_kills', 'coop_games', 'coop_wins', 'coop_losses',
                                               'coop_score', 'coop_time',
                                               'coop_toc_reports', 'coop_top_score', 'coop_worst_time',
                                               'deaths', 'distance', 'draws', 'games', 'grenade_hit_ratio',
                                               'grenade_hits', 'grenade_kills', 'grenade_shots',
                                               'grenade_teamhit_ratio',
                                               'grenade_teamhits', 'hit_ratio', 'hits', 'kd_ratio', 'kill_ratio',
                                               'kills',
                                               'losses', 'rd_bombs_defused', 'score', 'sg_escapes', 'sg_kills', 'shots',
                                               'spm_ratio', 'spr_ratio', 'suicides', 'teamhit_ratio', 'teamhits',
                                               'teamkills',
                                               'time', 'top_arrest_streak', 'top_arrests', 'top_death_streak',
                                               'top_kill_streak', 'top_kills', 'top_score', 'vip_captures',
                                               'vip_escape_time',
                                               'vip_escapes', 'vip_kills_invalid', 'vip_kills_valid', 'vip_rescues',
                                               'vip_times', 'vip_wins', 'weapon_distance', 'weapon_hit_ratio',
                                               'weapon_hits',
                                               'weapon_kill_ratio', 'weapon_kills', 'weapon_shots',
                                               'weapon_teamhit_ratio',
                                               'weapon_teamhits', 'wins']),

        migrations.CreateModel(
            name='Alias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=8, null=True, unique=True)),
                ('time', models.SmallIntegerField(default=0)),
                ('outcome', apps.utils.db.fields.EnumField(db_column='outcome_enum', enum_type='outcome_enum', null=True)),
                ('outcome_legacy', models.SmallIntegerField(db_column='outcome', default=0)),
                ('gametype', apps.utils.db.fields.EnumField(db_column='gametype_enum', enum_type='gametype_enum', null=True)),
                ('gametype_legacy', models.SmallIntegerField(db_column='gametype', null=True)),
                ('player_num', models.SmallIntegerField(default=0)),
                ('score_swat', models.SmallIntegerField(default=0)),
                ('score_sus', models.SmallIntegerField(default=0)),
                ('vict_swat', models.SmallIntegerField(default=0)),
                ('vict_sus', models.SmallIntegerField(default=0)),
                ('rd_bombs_defused', models.SmallIntegerField(default=0)),
                ('rd_bombs_total', models.SmallIntegerField(default=0)),
                ('coop_score', models.SmallIntegerField(default=0)),
                ('date_finished', models.DateTimeField(default=django.utils.timezone.now)),
                ('mapname', models.SmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='GametypeStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', apps.utils.db.fields.EnumField(enum_type='stats_category_enum')),
                ('year', models.SmallIntegerField()),
                ('points', models.FloatField(default=0)),
                ('position', models.PositiveIntegerField(db_index=True, null=True)),
                ('gametype', apps.utils.db.fields.EnumField(enum_type='gametype_enum')),
            ],
        ),
        migrations.CreateModel(
            name='Loadout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', apps.utils.db.fields.EnumField(db_column='primary_enum', enum_type='equipment_enum', null=True)),
                ('primary_legacy', models.SmallIntegerField(db_column='primary', default=0)),
                ('primary_ammo', apps.utils.db.fields.EnumField(db_column='primary_ammo_enum', enum_type='ammo_enum', null=True)),
                ('primary_ammo_legacy', models.SmallIntegerField(db_column='primary_ammo', default=0)),
                ('secondary', apps.utils.db.fields.EnumField(db_column='secondary_enum', enum_type='equipment_enum', null=True)),
                ('secondary_legacy', models.SmallIntegerField(db_column='secondary', default=0)),
                ('secondary_ammo', apps.utils.db.fields.EnumField(db_column='secondary_ammo_enum', enum_type='ammo_enum', null=True)),
                ('secondary_ammo_legacy', models.SmallIntegerField(db_column='secondary_ammo', default=0)),
                ('equip_one', apps.utils.db.fields.EnumField(db_column='equip_one_enum', enum_type='equipment_enum', null=True)),
                ('equip_one_legacy', models.SmallIntegerField(db_column='equip_one', default=0)),
                ('equip_two', apps.utils.db.fields.EnumField(db_column='equip_two_enum', enum_type='equipment_enum', null=True)),
                ('equip_two_legacy', models.SmallIntegerField(db_column='equip_two', default=0)),
                ('equip_three', apps.utils.db.fields.EnumField(db_column='equip_three_enum', enum_type='equipment_enum', null=True)),
                ('equip_three_legacy', models.SmallIntegerField(db_column='equip_three', default=0)),
                ('equip_four', apps.utils.db.fields.EnumField(db_column='equip_four_enum', enum_type='equipment_enum', null=True)),
                ('equip_four_legacy', models.SmallIntegerField(db_column='equip_four', default=0)),
                ('equip_five', apps.utils.db.fields.EnumField(db_column='equip_five_enum', enum_type='equipment_enum', null=True)),
                ('equip_five_legacy', models.SmallIntegerField(db_column='equip_five', default=0)),
                ('breacher', apps.utils.db.fields.EnumField(db_column='breacher_enum', enum_type='equipment_enum', null=True)),
                ('breacher_legacy', models.SmallIntegerField(db_column='breacher', default=0)),
                ('head', apps.utils.db.fields.EnumField(db_column='head_enum', enum_type='equipment_enum', null=True)),
                ('head_legacy', models.SmallIntegerField(db_column='head', default=0)),
                ('body', apps.utils.db.fields.EnumField(db_column='body_enum', enum_type='equipment_enum', null=True)),
                ('body_legacy', models.SmallIntegerField(db_column='body', default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='MapStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', apps.utils.db.fields.EnumField(enum_type='stats_category_enum')),
                ('year', models.SmallIntegerField()),
                ('points', models.FloatField(default=0)),
                ('position', models.PositiveIntegerField(db_index=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Objective',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', apps.utils.db.fields.EnumField(db_column='name_enum', enum_type='objective_enum', null=True)),
                ('name_legacy', models.SmallIntegerField(db_column='name')),
                ('status', apps.utils.db.fields.EnumField(db_column='status_enum', enum_type='objective_status_enum', null=True)),
                ('status_legacy', models.SmallIntegerField(db_column='status', default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField(protocol='IPv4')),
                ('team', apps.utils.db.fields.EnumField(db_column='team_enum', enum_type='team_enum', null=True)),
                ('team_legacy', models.SmallIntegerField(db_column='team', null=True)),
                ('coop_status', apps.utils.db.fields.EnumField(db_column='coop_status_enum', enum_type='coop_status_enum', null=True)),
                ('coop_status_legacy', models.SmallIntegerField(db_column='coop_status', default=0)),
                ('vip', models.BooleanField(default=False)),
                ('admin', models.BooleanField(default=False)),
                ('dropped', models.BooleanField(default=False)),
                ('score', models.SmallIntegerField(default=0)),
                ('time', models.SmallIntegerField(default=0)),
                ('kills', models.SmallIntegerField(default=0)),
                ('teamkills', models.SmallIntegerField(default=0)),
                ('deaths', models.SmallIntegerField(default=0)),
                ('suicides', models.SmallIntegerField(default=0)),
                ('arrests', models.SmallIntegerField(default=0)),
                ('arrested', models.SmallIntegerField(default=0)),
                ('kill_streak', models.SmallIntegerField(default=0)),
                ('arrest_streak', models.SmallIntegerField(default=0)),
                ('death_streak', models.SmallIntegerField(default=0)),
                ('vip_captures', models.SmallIntegerField(default=0)),
                ('vip_rescues', models.SmallIntegerField(default=0)),
                ('vip_escapes', models.SmallIntegerField(default=0)),
                ('vip_kills_valid', models.SmallIntegerField(default=0)),
                ('vip_kills_invalid', models.SmallIntegerField(default=0)),
                ('rd_bombs_defused', models.SmallIntegerField(default=0)),
                ('sg_escapes', models.SmallIntegerField(default=0)),
                ('sg_kills', models.SmallIntegerField(default=0)),
                ('coop_hostage_arrests', models.SmallIntegerField(default=0)),
                ('coop_hostage_hits', models.SmallIntegerField(default=0)),
                ('coop_hostage_incaps', models.SmallIntegerField(default=0)),
                ('coop_hostage_kills', models.SmallIntegerField(default=0)),
                ('coop_enemy_arrests', models.SmallIntegerField(default=0)),
                ('coop_enemy_incaps', models.SmallIntegerField(default=0)),
                ('coop_enemy_kills', models.SmallIntegerField(default=0)),
                ('coop_enemy_incaps_invalid', models.SmallIntegerField(default=0)),
                ('coop_enemy_kills_invalid', models.SmallIntegerField(default=0)),
                ('coop_toc_reports', models.SmallIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='PlayerStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.SmallIntegerField()),
                ('points', models.FloatField(default=0)),
                ('position', models.PositiveIntegerField(db_index=True, null=True)),
                ('category', apps.utils.db.fields.EnumField(db_column='category_enum', enum_type='stats_category_enum', null=True)),
                ('category_legacy', models.SmallIntegerField(db_column='category')),
            ],
            options={
                'db_table': 'tracker_rank',
            },
        ),
        migrations.CreateModel(
            name='Procedure',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', apps.utils.db.fields.EnumField(db_column='name_enum', enum_type='procedure_enum', null=True)),
                ('name_legacy', models.SmallIntegerField(db_column='name')),
                ('status', models.CharField(max_length=7)),
                ('score', models.SmallIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, null=True)),
                ('team', apps.utils.db.fields.EnumField(db_column='team_enum', enum_type='team_enum', null=True)),
                ('team_legacy', models.SmallIntegerField(db_column='team', null=True)),
                ('country', models.CharField(max_length=2, null=True)),
                ('first_seen_at', models.DateTimeField(null=True)),
                ('last_seen_at', models.DateTimeField(null=True)),
                ('stats_updated_at', models.DateTimeField(null=True)),
                ('preferences_updated_at', models.DateTimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField(protocol='IPv4')),
                ('port', models.PositiveIntegerField()),
                ('status_port', models.PositiveIntegerField(blank=True, null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('listed', models.BooleanField(default=False)),
                ('pinned', models.BooleanField(default=False)),
                ('country', models.CharField(blank=True, max_length=2, null=True)),
                ('hostname', models.CharField(blank=True, max_length=256, null=True)),
                ('version', models.CharField(blank=True, max_length=64, null=True)),
                ('failures', models.PositiveSmallIntegerField(default=0)),
                ('port_gs1', models.PositiveIntegerField(blank=True, null=True)),
                ('port_gs2', models.PositiveIntegerField(blank=True, null=True)),
                ('streamed', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='WeaponStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', apps.utils.db.fields.EnumField(enum_type='stats_category_enum')),
                ('year', models.SmallIntegerField()),
                ('points', models.FloatField(default=0)),
                ('position', models.PositiveIntegerField(db_index=True, null=True)),
                ('weapon', apps.utils.db.fields.EnumField(enum_type='equipment_enum')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.profile')),
            ],
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', apps.utils.db.fields.EnumField(db_column='name_enum', enum_type='equipment_enum', null=True)),
                ('name_legacy', models.SmallIntegerField(db_column='name')),
                ('time', models.SmallIntegerField(default=0)),
                ('shots', models.SmallIntegerField(default=0)),
                ('hits', models.SmallIntegerField(default=0)),
                ('teamhits', models.SmallIntegerField(default=0)),
                ('kills', models.SmallIntegerField(default=0)),
                ('teamkills', models.SmallIntegerField(default=0)),
                ('distance', models.FloatField(default=0, verbose_name='Distance, meters')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weapons', related_query_name='weapon', to='tracker.player')),
            ],
        ),
        migrations.CreateModel(
            name='ServerStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', apps.utils.db.fields.EnumField(enum_type='stats_category_enum')),
                ('year', models.SmallIntegerField()),
                ('points', models.FloatField(default=0)),
                ('position', models.PositiveIntegerField(db_index=True, null=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.profile')),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.server')),
            ],
        ),
        migrations.AddIndex(
            model_name='server',
            index=models.Index(models.Func(models.F('ip'), function='host'), models.F('port'), name='tracker_server_host_ip_port'),
        ),
        migrations.AlterUniqueTogether(
            name='server',
            unique_together={('ip', 'port')},
        ),
        migrations.AddField(
            model_name='profile',
            name='game_first',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='tracker.game'),
        ),
        migrations.AddField(
            model_name='profile',
            name='game_last',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='tracker.game'),
        ),
        migrations.AddField(
            model_name='profile',
            name='loadout',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='tracker.loadout'),
        ),
        migrations.AddField(
            model_name='procedure',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.game'),
        ),
        migrations.AddField(
            model_name='playerstats',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.profile'),
        ),
        migrations.AddField(
            model_name='player',
            name='alias',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tracker.alias'),
        ),
        migrations.AddField(
            model_name='player',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tracker.game'),
        ),
        migrations.AddField(
            model_name='player',
            name='loadout',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='tracker.loadout'),
        ),
        migrations.AddField(
            model_name='objective',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.game'),
        ),
        migrations.AddField(
            model_name='mapstats',
            name='map',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.map'),
        ),
        migrations.AddField(
            model_name='mapstats',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.profile'),
        ),
        migrations.AlterUniqueTogether(
            name='loadout',
            unique_together={('primary', 'secondary', 'primary_ammo', 'secondary_ammo', 'equip_one', 'equip_two', 'equip_three', 'equip_four', 'equip_five', 'head', 'body', 'breacher')},
        ),
        migrations.AddField(
            model_name='gametypestats',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.profile'),
        ),
        migrations.AddField(
            model_name='game',
            name='map',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tracker.map'),
        ),
        migrations.AddField(
            model_name='game',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tracker.server'),
        ),
        migrations.AddField(
            model_name='alias',
            name='isp',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='geoip.isp'),
        ),
        migrations.AddField(
            model_name='alias',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracker.profile'),
        ),
        migrations.AlterUniqueTogether(
            name='weaponstats',
            unique_together={('year', 'category', 'profile', 'weapon')},
        ),
        migrations.AlterUniqueTogether(
            name='serverstats',
            unique_together={('year', 'category', 'profile', 'server')},
        ),
        migrations.AddIndex(
            model_name='playerstats',
            index=models.Index(models.F('year'), models.F('category_legacy'), condition=models.Q(('position__lte', 5)), name='tracker_rank_year_category_position_lte'),
        ),
        migrations.AlterUniqueTogether(
            name='playerstats',
            unique_together={('year', 'category_legacy', 'profile')},
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(models.Func(models.F('ip'), function='host'), models.OrderBy(models.F('id'), descending=True), name='tracker_player_host_ip_id_desc'),
        ),
        migrations.AlterIndexTogether(
            name='player',
            index_together={('alias', 'kills'), ('alias', 'kill_streak'), ('alias', 'arrests'), ('alias', 'arrest_streak'), ('alias', 'score')},
        ),
        migrations.AlterUniqueTogether(
            name='mapstats',
            unique_together={('year', 'category', 'profile', 'map')},
        ),
        migrations.AlterUniqueTogether(
            name='gametypestats',
            unique_together={('year', 'category', 'profile', 'gametype')},
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(models.OrderBy(django.db.models.expressions.CombinedExpression(models.F('score_swat'), '+', models.F('score_sus')), descending=True), name='tracker_game_score_swat_score_sus'),
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(models.OrderBy(models.F('date_finished'), descending=True), name='tracker_game_date_finished_desc'),
        ),
        migrations.AddIndex(
            model_name='alias',
            index=models.Index(django.db.models.functions.text.Upper('name'), models.F('isp_id'), name='tracker_alias_upper_name_isp_id'),
        ),
        migrations.AlterIndexTogether(
            name='alias',
            index_together={('name', 'isp')},
        ),
    ]
