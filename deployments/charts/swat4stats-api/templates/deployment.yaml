apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "swat4stats-api.podname" (set . "Name" "uwsgi") }}
  labels:
    {{- include "swat4stats-api.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.uwsgi.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 25%
  selector:
    matchLabels:
      {{- include "swat4stats-api.selectorLabels" (set $ "Backend" "uwsgi") | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "swat4stats-api.selectorLabels" (set $ "Backend" "uwsgi") | nindent 8 }}
      annotations:
      {{- if .Values.uwsgiExporter.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.uwsgiExporter.targetPort }}"
      {{- end }}
    spec:
      {{- with $.Values.image.pullSecrets }}
      imagePullSecrets:
          {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.uwsgi.terminationGracePeriodSeconds }}
      initContainers:
        - name: {{ include "swat4stats-api.podname" (set . "Name" "copystatic") }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["cp", "-r", "/app/static/.", "/var/www/static"]
          volumeMounts:
            - name: staticfiles
              mountPath: /var/www/static
      containers:
        - name: {{ include "swat4stats-api.podname" (set . "Name" "staticfiles") }}
          {{- with .Values.staticfiles.image }}
          image: "{{ .repository }}:{{ .tag | default "latest" }}"
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}
          ports:
            - name: nginx
              containerPort: {{ .Values.staticfiles.targetPort }}
              protocol: TCP
          volumeMounts:
            - name: staticfiles
              mountPath: /var/www/static
            - name: config
              mountPath: /etc/nginx/nginx.conf
              subPath: staticfiles.conf
        {{- if .Values.uwsgiExporter.enabled }}
        - name: {{ include "swat4stats-api.podname" (set . "Name" "uwsgi-exporter") }}
          {{- with .Values.uwsgiExporter.image }}
          image: "{{ .repository }}:{{ .tag | default "latest" }}{{ if .sha }}@sha256:{{ .sha }}{{ end }}"
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}
          args: ["--stats.uri", "http://localhost:1717"]
          ports:
            - name: exporter
              containerPort: {{ .Values.uwsgiExporter.targetPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: exporter
        {{- end }}
        - name: {{ include "swat4stats-api.podname" (set . "Name" "uwsgi") }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: uwsgi
              containerPort: {{ .Values.uwsgi.targetPort }}
              protocol: TCP
          env:
          {{- range $key, $val := .Values.uwsgi.env }}
            - name: {{ $key }}
              value: "{{ $val }}"
          {{- end }}
          {{- range $key, $val := .Values.sharedEnv }}
            - name: {{ $key }}
              value: "{{ $val }}"
          {{- end }}
          envFrom:
          {{- range .Values.envFromSecrets }}
            - secretRef:
                name: {{ tpl .name $ }}
                optional: {{ .optional | default false }}
          {{- end }}
          livenessProbe:
{{ toYaml .Values.livenessProbe | indent 12 }}
          readinessProbe:
{{ toYaml .Values.readinessProbe | indent 12 }}
      volumes:
        - name: staticfiles
          emptyDir: {}
        - name: config
          configMap:
            name: {{ include "swat4stats-api.fullname" . }}


{{- range .Values.celery.workers }}
{{- $workerName := printf "%s-%s-%s" "celery" "worker" .name -}}
{{- $workerQueues := join "," .queues -}}
{{- $workerCmd := list
    "celery" "-A" $.Values.celery.app "worker"
    "--queues" $workerQueues
    "--concurrency" .concurrency
    "--loglevel" $.Values.celery.logLevel
    "--time-limit" .timeLimit
    "--max-tasks-per-child" .maxTasks
    "--events"
    "--pidfile="
}}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "swat4stats-api.podname" (set $ "Name" $workerName) }}
  labels:
    {{- include "swat4stats-api.labels" $ | nindent 4 }}
spec:
  replicas: {{ .replicas }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "swat4stats-api.selectorLabels" (set $ "Backend" $workerName) | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "swat4stats-api.selectorLabels" (set $ "Backend" $workerName) | nindent 8 }}
    spec:
      {{- with $.Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .timeLimit }}
      containers:
        - name: {{ include "swat4stats-api.podname" (set $ "Name" $workerName) }}
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          command:
            {{- toYaml ($workerCmd | toStrings) | nindent 12 }}
          env:
            {{- range $key, $val := $.Values.sharedEnv }}
            - name: {{ $key }}
              value: "{{ $val }}"
            {{- end }}
          envFrom:
          {{- range $.Values.envFromSecrets }}
            - secretRef:
                name: {{ tpl .name $ }}
                optional: {{ .optional | default false }}
          {{- end }}
{{ end }}

{{- with .Values.celery }}
{{- $beatName := printf "%s-%s" "celery" "beat" -}}
{{- $beatCmd := list
    "celery" "-A" .app "beat"
    "--loglevel" .logLevel
    "--schedule" "/tmp/celerybeat.db"
    "--pidfile="
-}}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "swat4stats-api.podname" (set $ "Name" $beatName) }}
  labels:
    {{- include "swat4stats-api.labels" $ | nindent 4 }}
spec:
  replicas: {{ .beat.replicas }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "swat4stats-api.selectorLabels" (set $ "Backend" $beatName) | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "swat4stats-api.selectorLabels" (set $ "Backend" $beatName) | nindent 8 }}
    spec:
      {{- with $.Values.image.pullSecrets }}
      imagePullSecrets:
          {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ include "swat4stats-api.podname" (set $ "Name" $beatName) }}
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          command:
            {{- toYaml ($beatCmd | toStrings) | nindent 12 }}
          env:
            {{- range $key, $val := $.Values.sharedEnv }}
            - name: {{ $key }}
              value: "{{ $val }}"
            {{- end }}
          envFrom:
          {{- range $.Values.envFromSecrets }}
            - secretRef:
                name: {{ tpl .name $ }}
                optional: {{ .optional | default false }}
          {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
{{ end -}}

{{- with .Values.celeryExporter }}
{{- $exporterName := "celery-exporter" -}}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "swat4stats-api.podname" (set $ "Name" $exporterName) }}
  labels:
    {{- include "swat4stats-api.labels" $ | nindent 4 }}
spec:
  replicas: {{ if .enabled }}1{{ else }}0{{ end }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "swat4stats-api.selectorLabels" (set $ "Backend" $exporterName) | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "swat4stats-api.selectorLabels" (set $ "Backend" $exporterName) | nindent 8 }}
      annotations:
      {{- if .enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .targetPort }}"
      {{- end }}
    spec:
      {{- with $.Values.image.pullSecrets }}
      imagePullSecrets:
          {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ include "swat4stats-api.podname" (set $ "Name" $exporterName) }}
          image: "{{ .image.repository }}:{{ .image.tag | default "latest" }}{{ if .image.sha }}@sha256:{{ .image.sha }}{{ end }}"
          imagePullPolicy: {{ .image.pullPolicy }}
          env:
            - name: CE_BROKER_URL
              value: "{{ $.Values.sharedEnv.SETTINGS_CELERY_BROKER_URL }}"
          ports:
            - name: exporter
              containerPort: {{ .targetPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: exporter
{{ end -}}
