[tool.poetry]
name = "swat4stats"
version = "0.43.0"
description = "Source code to swat4stats.com backend"
authors = ["Sergei Khoroshilov <kh.sergei@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
Django = "4.2.13"
celery = "5.4.0"
bleach = "6.1.0"
pytz = "2024.1"
Markdown = "3.4.3"
psycopg = {extras = ["binary"], version = "^3.1.19"}
redis = "5.0.4"
uWSGI = "2.0.21"
python-dateutil = "2.9.0.post0"
ipwhois = "1.2.0"
django-cacheback = "3.0.0"
django-debug-toolbar = "4.4.2"
django-countries = "7.6.1"
django-filter = "24.2"
djangorestframework = "3.15.1"
drf-yasg = "1.21.7"
voluptuous = "0.14.2"
aiohttp = "3.9.5"
django-redis = "5.4.0"
sentry-sdk = "2.4.0"

[tool.poetry.group.dev.dependencies]
coverage = "7.5.3"
Faker = "25.5.0"
factory-boy = "3.3.0"
pytest = "8.2.2"
pytest-django = "4.8.0"
pytest-localserver = "0.8.1"
pytest-cov = "5.0.0"
pytest-repeat = "0.9.3"
mypy = "1.10.0"
ruff = "0.4.8"  # also update the version in github workflows

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "swat4stats.settings"
norecursedirs = ".git"
python_files = "test_*.py"
addopts = "--tb=native --reuse-db"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore",
]

[tool.ruff]
line-length = 100
target-version = "py311"
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".pytest_cache",
    ".ruff_cache",
    "static",
    "templates",
]

[tool.ruff.lint]
select = [
    "F",        # pyflakes
    "E",        # pycodestyle Error
    "W",        # pycodestyle Warning
    "C90",      # mccabe
    "I",        # isort
    "N",        # pep8-naming
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
    "ASYNC",    # flake8-async
    "BLE",      # flake8-blind-except
    "FBT",      # flake8-boolean-trap
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "C4",       # flake8-comprehensions
    "DTZ",      # flake8-datetimez
    "T10",      # flake8-debugger
    "DJ",       # flake8-django
    "EM",       # flake8-errmsg
    "FA",       # flake8-future-annotations
    "ISC",      # flake8-implicit-str-concat
    "G",        # flake8-logging-format
    "INP",      # flake8-no-pep420
    "PIE",      # flake8-pie
    "T20",      # flake8-print
    "PT",       # flake8-pytest-style
    "Q",        # flake8-quotes
    "RSE",      # flake8-raise
    "RET",      # flake8-return
    "SLOT",     # flake8-slots
    "SIM",      # flake8-simplify
    "TID",      # flake8-tidy-imports
    "TCH",      # flake8-type-checking
    "INT",      # flake8-gettext
    "PTH",      # flake8-use-pathlib
    "ERA",      # eradicate
    "PGH",      # pygrep-hooks
    "PERF",     # perflint
    "RUF",      # ruff
]
ignore = [
    "ISC001",   # The following rules may cause conflicts when used with the formatter: `ISC001`
    "N817",     # CamelCase `ElementTree` imported as acronym `ET`
    "B904" ,    # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None`
    "BLE001",   # Do not catch blind exception: `Exception`
    "EM101",    # Exception must not use a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first
    "DJ001",    # Avoid using `null=True` on string-based fields such as CharField
]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"apps/*/migrations/*.py" = ["E501", "RUF012"]
"tests/factories/*.py" = ["N805", "RUF012"]

[tool.ruff.lint.flake8-pytest-style]
parametrize-names-type = "csv"
fixture-parentheses = false

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
force-sort-within-sections = false

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
disable_error_code = "misc"
python_version = "3.11"
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
strict_equality = true

[[tool.mypy.overrides]]
module = "apps.*.migrations.*"
disable_error_code = "var-annotated, has-type, arg-type"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
