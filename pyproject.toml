[tool.poetry]
name = "swat4stats"
version = "0.157.0"
description = "Source code to swat4stats.com backend"
authors = ["Sergei Khoroshilov <kh.sergei@gmail.com>"]
license = "MIT"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.13,<3.14"
Django = "5.2.3"
celery = "5.5.3"
bleach = "6.2.0"
pytz = "2025.2"
Markdown = "3.8.2"
psycopg = {extras = ["binary"], version = "3.2.9"}
redis = "6.2.0"
uwsgi = "2.0.30"
python-dateutil = "2.9.0.post0"
ipwhois = "1.3.0"
django-cacheback = "3.0.0"
django-debug-toolbar = "5.2.0"
django-countries = "7.6.1"
django-filter = "25.1"
djangorestframework = "3.16.0"
voluptuous = "0.15.2"
aiohttp = "3.12.13"
django-redis = "5.4.0"
sentry-sdk = "2.31.0"

[tool.poetry.group.dev.dependencies]
coverage = "7.9.1"
Faker = "37.4.0"
factory-boy = "3.3.3"
pytest = "8.4.1"
pytest-django = "4.11.1"
pytest-localserver = "0.9.0.post0"
pytest-cov = "6.2.1"
pytest-repeat = "0.9.4"
mypy = "1.16.1"
types-pytz = "2025.2.0.20250516"
ruff = "0.12.0"  # also update the version in github workflows and .pre-commit-config.yaml

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "swat4stats.settings"
norecursedirs = ".git"
python_files = "test_*.py"
addopts = "--tb=native --reuse-db"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore",
]

[tool.ruff]
line-length = 100
target-version = "py313"
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".pytest_cache",
    ".ruff_cache",
    "static",
    "templates",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D",        # pydocstyle
    "ANN",      # flake8-annotations
    "CPY",      # flake8-copyright
    "TD",       # flake8-todos
    "FIX",      # flake8-fixme
    "PD",       # pandas-vet
    "NPY",      # NumPy-specific rules
    "FAST",     # FastAPI
    "AIR",      # Airflow
    "DOC",      # pydoclint

    "COM812",   # Trailing comma missing
    "TRY003",   # Avoid specifying long messages outside the exception class
    "TRY400",   # Use `logging.exception` instead of `logging.error`
    "S311",     # Standard pseudo-random generators are not suitable for cryptographic purposes
    "ISC001",   # The following rules may cause conflicts when used with the formatter: `ISC001`
    "B904" ,    # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None`
    "EM101",    # Exception must not use a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first
    "DJ001",    # Avoid using `null=True` on string-based fields such as CharField
]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"apps/*/migrations/*.py" = ["ARG001", "E501", "RUF012"]
"tests/factories/*.py" = ["N805", "RUF012"]
"tests/**.py" = ["ARG001", "ARG002", "FBT001", "PLR0913", "PLR0915", "PLR2004", "S101", "S104", "S314", "S324"]

[tool.ruff.lint.flake8-pytest-style]
parametrize-names-type = "csv"
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
force-sort-within-sections = false

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
disable_error_code = "misc"
python_version = "3.13"
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
strict_equality = true

[[tool.mypy.overrides]]
module = "apps.*.migrations.*"
disable_error_code = "var-annotated, has-type, arg-type"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false

[tool.coverage.run]
branch = true
omit = [
    "apps/*/migrations/*",
    "tests/*",
    "apps/*/translation.py",
]

[tool.coverage.report]
include = [
    "apps/*",
]
